*likelycomplete.txt*  Collect & rank words for completion
                      Author: Tom Link, micathom at gmail com

This plugin provides some sort of probabilistic insert mode completion 
(see |ins-completion|). It doesn't provide semantic source code 
completion that verifies the correctness of the code. LikelyComplete 
solely aims at saving keystrokes.

Once enabled for a filetype (see |g:likelycomplete_filetypes|), this 
plugin observes any buffer of that filetype. It collects the words, 
ranks them based on the probability of their occurrences (sort of) and 
compiles a dictionary file that is fed to 'complete'. Any words that are 
frequently used in files of enabled filetypes, are offered in the 
completion list of |i_CTRL-P|. The plugin also supports insert mode 
completion via 'completefunc' (see |i_CTRL-X_CTRL-U|) that optionally 
takes into account the cursor's context.

The word list on disk is updated when leaving vim. It could take a few 
editing sessions to get at a usable word list.

Featues:

    - Generate word lists for use in 'complete' (see also 
      |ins-completion| and |i_CTRL-P|)
    - Ranking of words based on the probability of their occurrence
    - Set a 'completefunc' (incorporate results from the original 
      'completefunc' and optionally from 'omnifunc') -- see 
      |g:likelycomplete#set_completefunc|

Additional featues for use as 'completefunc' (|i_CTRL-X_CTRL-U|):

    - Auto-completion -- see |g:likelycomplete#auto_complete|
    - Fuzzy completion -- see |g:likelycomplete#use_fuzzy_matches|
    - Part of word completion -- see |g:likelycomplete#match_beginning|
    - Context-based ranking -- see |g:likelycomplete#assess_context|
    - If finding the right completion via VIM's own 
      |ins-completion-menu| is too cumbersome, press <C-S-Space> -- see 
      |g:likelycomplete#select_imap| and |g:likelycomplete#list_picker|

By default only completion via |i_CTRL-P| is enabled (and only for those 
filetypes listed in |g:likelycomplete_filetypes|). Most of the above options 
can be enabled by setting |g:likelycomplete#experimental| to 1.


Related Work~

There are of course other similar plugins you might want to check out if 
likelycomplete doesn't meet your requirements:

    - neocomplcache
    - YouCompleteMe
    - AutoComplPop
    - ...


-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

This script requires tlib (vimscript #1863) to be installed.

Also available via git: http://github.com/tomtom/likelycomplete_vim/


Post-Install~

Users have to set |g:likelycomplete_filetypes| in |vimrc| in order to enable 
LikelyComplete for certain filetypes.


========================================================================
Contents~

        g:likelycomplete_filetypes .................. |g:likelycomplete_filetypes|
        g:likelycomplete_per_window ................. |g:likelycomplete_per_window|
        LikelycompleteSetupFiletype ................. |LikelycompleteSetupFiletype()|
        :Likelycomplete ............................. |:Likelycomplete|
        :Likelycompleteremovewords .................. |:Likelycompleteremovewords|
        :Likelycompletemapcompletefunc .............. |:Likelycompletemapcompletefunc|
        :Likelycompletemapselect .................... |:Likelycompletemapselect|
        :Likelycompleteupdate ....................... |:Likelycompleteupdate|
        g:likelycomplete#ft#vim#options ............. |g:likelycomplete#ft#vim#options|
        likelycomplete#ft#vim#Init .................. |likelycomplete#ft#vim#Init()|
        g:likelycomplete#ft#javascript#options ...... |g:likelycomplete#ft#javascript#options|
        likelycomplete#ft#javascript#Init ........... |likelycomplete#ft#javascript#Init()|
        g:likelycomplete#experimental ............... |g:likelycomplete#experimental|
        g:likelycomplete#list_set_filter ............ |g:likelycomplete#list_set_filter|
        g:likelycomplete#select_imap ................ |g:likelycomplete#select_imap|
        g:likelycomplete#set_completefunc ........... |g:likelycomplete#set_completefunc|
        g:likelycomplete#auto_complete .............. |g:likelycomplete#auto_complete|
        g:likelycomplete#sources .................... |g:likelycomplete#sources|
        g:likelycomplete#dictionaries ............... |g:likelycomplete#dictionaries|
        g:likelycomplete#match_beginning ............ |g:likelycomplete#match_beginning|
        g:likelycomplete#use_fuzzy_matches .......... |g:likelycomplete#use_fuzzy_matches|
        g:likelycomplete#use_completedone ........... |g:likelycomplete#use_completedone|
        g:likelycomplete#list_picker ................ |g:likelycomplete#list_picker|
        g:likelycomplete#data_cfile ................. |g:likelycomplete#data_cfile|
        g:likelycomplete#maxsize .................... |g:likelycomplete#maxsize|
        g:likelycomplete#word_minlength ............. |g:likelycomplete#word_minlength|
        g:likelycomplete#once_per_file .............. |g:likelycomplete#once_per_file|
        g:likelycomplete#assess_context ............. |g:likelycomplete#assess_context|
        g:likelycomplete#context_lines .............. |g:likelycomplete#context_lines|
        g:likelycomplete#base ....................... |g:likelycomplete#base|
        g:likelycomplete#max ........................ |g:likelycomplete#max|
        g:likelycomplete#base_context ............... |g:likelycomplete#base_context|
        g:likelycomplete#max_context ................ |g:likelycomplete#max_context|
        g:likelycomplete#prgname .................... |g:likelycomplete#prgname|
        g:likelycomplete#vimprg ..................... |g:likelycomplete#vimprg|
        g:likelycomplete#run_async .................. |g:likelycomplete#run_async|
        g:likelycomplete#use_vimproc ................ |g:likelycomplete#use_vimproc|
        g:likelycomplete#prg_init_exec .............. |g:likelycomplete#prg_init_exec|
        g:likelycomplete#max_wait ................... |g:likelycomplete#max_wait|
        g:likelycomplete#use_syntax ................. |g:likelycomplete#use_syntax|
        g:likelycomplete#ignore_syntax_rx ........... |g:likelycomplete#ignore_syntax_rx|
        g:likelycomplete#debug ...................... |g:likelycomplete#debug|
        likelycomplete#LoadData ..................... |likelycomplete#LoadData()|
        likelycomplete#GetOption .................... |likelycomplete#GetOption()|
        likelycomplete#String2Args .................. |likelycomplete#String2Args()|
        likelycomplete#SetupFiletype ................ |likelycomplete#SetupFiletype()|
        likelycomplete#SetupBuffer .................. |likelycomplete#SetupBuffer()|
        likelycomplete#RemoveFiletype ............... |likelycomplete#RemoveFiletype()|
        i_<c-g><c-u> ................................ |i_<c-g><c-u>|
        likelycomplete#Tokenize ..................... |likelycomplete#Tokenize()|
        likelycomplete#AsyncUpdateWordList .......... |likelycomplete#AsyncUpdateWordList()|
        likelycomplete#EnsureServer ................. |likelycomplete#EnsureServer()|
        likelycomplete#Handshake .................... |likelycomplete#Handshake()|
        likelycomplete#InitServer ................... |likelycomplete#InitServer()|
        likelycomplete#RegisterClient ............... |likelycomplete#RegisterClient()|
        likelycomplete#ExitServer ................... |likelycomplete#ExitServer()|
        likelycomplete#ListPicker_tlib .............. |likelycomplete#ListPicker_tlib()|
        likelycomplete#RemoveWords .................. |likelycomplete#RemoveWords()|
        likelycomplete#MapSelectWord ................ |likelycomplete#MapSelectWord()|
        likelycomplete#SelectWord ................... |likelycomplete#SelectWord()|
        likelycomplete#SetComleteFunc ............... |likelycomplete#SetComleteFunc()|
        likelycomplete#EscapeAutoComplete ........... |likelycomplete#EscapeAutoComplete()|
        likelycomplete#Complete ..................... |likelycomplete#Complete()|


========================================================================
plugin/likelycomplete.vim~

                                                    *g:likelycomplete_filetypes*
g:likelycomplete_filetypes     (default: [])
    A list of filetypes for which LikelyComplete is automatically 
    enabled.

    If you want to permanently disable LikelyComplete for a filetype, 
    it isn't sufficient to remove the filetype name from this 
    variable. You should also call |likelycomplete#RemoveFiletype()| 
    to fully remove any cached information for this filetype.

    The pseudo-filetype "_" is for buffers with no filetype (i.e., 
    'ft' is empty).

                                                      *b:likelycomplete_filetype*
    If the variable b:likelycomplete_filetype is defined on FileType 
    events, its value is used instead of 'filetype'. LikelyComplete 
    is automatically enabled for all buffers where the 
    b:likelycomplete_filetype is defined. This variable can be used to 
    generate project-specific word lists.

                                                    *g:likelycomplete_per_window*
g:likelycomplete_per_window    (default: 0)
                                                      *w:likelycomplete_filetype*
    If true, support window specific values of 
    |b:likelycomplete_filetype|.

    If you have several windows of one buffer with differing 
    filetypes, those should not conflict with respect to the following 
    options (see |g:likelycomplete#options| for details): >

      set_completefunc
      auto_complete

<   and maybe some more.

    NOTE: This variable should not be changed once the plugin was 
    loaded.

                                                    *LikelycompleteSetupFiletype()*
LikelycompleteSetupFiletype(filetype)

                                                    *:Likelycomplete*
:Likelycomplete [NAME=VALUE ...]
    Enable LikelyComplete for the current buffer.
    See |g:likelycomplete#options| for a list of supported key-value
    arguments.
    In general, the plugin should be enabled by setting 
    |g:likelycomplete_filetypes|.

                                                    *:Likelycompleteremovewords*
:Likelycompleteremovewords [FILETYPE]
    Remove words from the list for a given filetype (or the filetype of 
    the current buffer).

                                                    *:Likelycompletemapcompletefunc*
:Likelycompletemapcompletefunc
    Map 'completefunc' to a function that returns matches from the 
    original completefunc and from the buffers wordlist.
    See also |g:likelycomplete#use_omnifunc| and 
    |g:likelycomplete#set_completefunc|.

                                                    *:Likelycompletemapselect*
:Likelycompletemapselect IMAP
    Map insert mode IMAP to a function that lets users select a completion 
    from a word list.
    See |tlib#input#List()| for details on how to use the list picker.
    See also |g:likelycomplete#use_omnifunc| and |g:likelycomplete#select_imap|.

                                                    *:Likelycompleteupdate*
:Likelycompleteupdate


========================================================================
autoload/likelycomplete/ft/vim.vim~

                                                    *g:likelycomplete#ft#vim#options*
g:likelycomplete#ft#vim#options (default: {...})
    Some custom options for the vim filetype (see 
    |g:likelycomplete#options|).
    Anything following a single or double quote is removed. This will 
    make sure that all strings an comments are removed -- at the cost 
    of also removing eligible identifiers following a string.

                                                    *likelycomplete#ft#vim#Init()*
likelycomplete#ft#vim#Init()


========================================================================
autoload/likelycomplete/ft/javascript.vim~

                                                    *g:likelycomplete#ft#javascript#options*
g:likelycomplete#ft#javascript#options (default: {...})
    Some custom options for javascript (see 
    |g:likelycomplete#options|).

                                                    *likelycomplete#ft#javascript#Init()*
likelycomplete#ft#javascript#Init()


========================================================================
autoload/likelycomplete.vim~

                                                    *g:likelycomplete#experimental*
g:likelycomplete#experimental  (default: 0)
    If 1, enable some experimental options.
    If 2, enable even more experimental options that are not 
    recommended for everyday use.

    Some of these experimental options may cause minor interruptions, 
    delays, and increased memory usage.

    The list of features deemed 'experimental' may change from version 
    to version.

                                                    *g:likelycomplete#list_set_filter*
g:likelycomplete#list_set_filter (default: 0)
    If true, the part of the words matching the the base text will be 
    highlighted in |likelycomplete#SelectWord()|.
    If false, the setting of 'smartcase' is ignored.

                                                    *g:likelycomplete#select_imap*
g:likelycomplete#select_imap   (default: empty(maparg('<C-S-Space>', 'i'))? '<C-S-Space>' : '')
    The default map for |:Likelycompletemapselect|.
    If non-empty, enable |:Likelycompletemapselect| for all enabled 
    filetypes.

                                                    *g:likelycomplete#set_completefunc*
g:likelycomplete#set_completefunc (default: g:likelycomplete#experimental >= 1)
    If true, set 'completefunc' for supported buffers. The results of 
    the old completefunc will be incorporated.
    See also |:Likelycompletemapcompletefunc|.

                                                    *g:likelycomplete#auto_complete*
g:likelycomplete#auto_complete (default: g:likelycomplete#experimental >= 1 ? 2 : 0)
    The number of characters after which auto-completion should be 
    invoked. If 0, auto-completion is disabled.

                                    *i_Ctrl-G_Ctrl-U* *likelycomplete-<c-g><c-u>*
    When auto-completion is enabled, a |imap| <c-g><c-u> is defined 
    that can be used to temporarily disable auto-completion in order 
    to perform some other kind of |ins-completion|. Auto-completion 
    will be re-enabled on the next |CompleteDone| event issued by that 
    completion.

    This option requires |g:likelycomplete#set_completefunc| to be 
    true or |:Likelycompletemapcompletefunc| to be called.

                                                    *g:likelycomplete#sources*
g:likelycomplete#sources       (default: ['likelycomplete', 'words', 'dictionaries', 'tags', 'syntaxcomplete'])
    A list of sources that will be used for compiling the list of 
    possible completions.

    Possible elements:

      likelycomplete .. Include information gathered by 
                      the LikelyComplete plugin
      completefunc .. Include results from 'completefunc'
      omnifunc ...... Include results from 'omnifunc' -- please be 
                      aware that some implementations for omnifunc 
                      take their time (at least on first invocation).
      syntaxcomplete .. Use |syntaxcomplete#Complete|.
      words ......... Include the current buffer's keywords
      dictionaries .. Use dictionary files as defined in 
                      |g:likelycomplete#dictionaries|
      dictionary .... Use dictionary files as defined in 
                      'dictionary'
      tags .......... Tags as returned by |taglist()|
      snipMate ...... snipMate snippets
      g:{VAR} ....... A global variable
      b:{VAR} ....... A buffer-local variable
      w:{VAR} ....... A window-local variable
      FUNCTION ...... A function that takes as arguments the filetype, 
                      the base, a dictionary of filetype-specific 
                      options and returns a list of possible 
                      completions
      files ......... Use files

    If an entry begins with "?", it is only evaluated when the list of 
    possible completions is empty, i.e. none of the previous items 
    yielded any completions.

    This is only used in conjunction with |:Likelycompletemapselect| 
    and |:Likelycompletemapcompletefunc|.

                                                    *g:likelycomplete#dictionaries*
g:likelycomplete#dictionaries  (default: {})
    A dictionary of 'spelllang' => dictionary file.

    CAUTION: Please be aware that the value of spelllang is currently 
    ignored and all dictionary files are used.

                                                    *g:likelycomplete#match_beginning*
g:likelycomplete#match_beginning (default: 0)
    If true, matches must match the beginning of a word -- this is 
    only relevant to |:Likelycompletemapselect| and 
    |:Likelycompletemapcompletefunc|. Matches for |i_Ctrl-P| must 
    always match the beginning of a word.

                                                    *g:likelycomplete#use_fuzzy_matches*
g:likelycomplete#use_fuzzy_matches (default: 1)
    If true, use fuzzy matches for |:Likelycompletemapselect| 
    and |:Likelycompletemapcompletefunc|.
    If you really believe in fuzzy matching, you might want to 
    consider also setting |g:tlib#input#filter_mode| to 'fuzzy'.

                                                    *g:likelycomplete#use_completedone*
g:likelycomplete#use_completedone (default: 1)
    If true, add weights for the selected word.

                                                    *g:likelycomplete#list_picker*
g:likelycomplete#list_picker   (default: 'tlib')
    VIM plugin developers can add support for "list pickers" other 
    than tlib by defining the following functions:

        likelycomplete#ListPicker(type, prompt, list, base)

    with

      type .... 's' (select single item) or 'm' (select multiple items)
      prompt .. A string
      list .... A list
      base .... A string that should be selected (may be ignored; see 
                also |g:likelycomplete#list_set_filter|)

                                                    *g:likelycomplete#data_cfile*
g:likelycomplete#data_cfile    (default: tlib#persistent#Filename('likelycomplete', 'data', 1))

                                                    *g:likelycomplete#maxsize*
g:likelycomplete#maxsize       (default: 5000)
    The maximum number of words kept per filetype.

                                                    *g:likelycomplete#word_minlength*
g:likelycomplete#word_minlength (default: 3)
    Minimum length of words.

                                                    *g:likelycomplete#once_per_file*
g:likelycomplete#once_per_file (default: 0)
    If true, count a word only once per file. By default, N occurences 
    of word X in a buffer will be counted as N times.

                                                    *g:likelycomplete#assess_context*
g:likelycomplete#assess_context (default: g:likelycomplete#experimental >= 1 && !g:likelycomplete#once_per_file ? 5 : 0)
    The number of preceding words that should be taken into account 
    when sorting the list of possible completions.
    This is only used in conjunction with |:Likelycompletemapselect| 
    and |:Likelycompletemapcompletefunc|.

    CAUTION: This may cause a slow-down and increased memory use. This 
    option only works properly if |g:likelycomplete#once_per_file| 
    evaluates to false.

                                                    *g:likelycomplete#context_lines*
g:likelycomplete#context_lines (default: 2)
    When assessing a word in context also include the previous N 
    lines.

                                                    *g:likelycomplete#base*
g:likelycomplete#base          (default: 50)
    The base number of observations.
    Also the number of files, you can edit without removing a word 
    that was't included in any of these files.
    If this value is too low, new words won't get a chance to be 
    included in the list.

                                                    *g:likelycomplete#max*
g:likelycomplete#max           (default: 10000)
    The maximum number of observations taken into account.

                                                    *g:likelycomplete#base_context*
g:likelycomplete#base_context  (default: 20)
    Forget a word in context after N files where it was missing.

                                                    *g:likelycomplete#max_context*
g:likelycomplete#max_context   (default: 1000)
    The max weight for words in context.

    NOTE: The actual max value is |g:likelycomplete#max_context| + 
    |g:likelycomplete#base_context| - 1.

                                                    *g:likelycomplete#prgname*
g:likelycomplete#prgname       (default: g:likelycomplete#experimental >= 2 && has('clientserver') && !empty(v:servername) ? v:progname : '')
    Non-empty use this program to asynchronously update word lists.
    You should make sure though that your version of vim has 
    |+clientserver| support -- this is most likely true for the 
    Windows or GTK Version of GVIM.

                                                    *g:likelycomplete#vimprg*
g:likelycomplete#vimprg        (default: 'vim')
    If |g:likelycomplete#use_vimproc| is enabled, vim is used to 
    update the word-list. By default, we assume, vim is in $PATH.

                                                    *g:likelycomplete#run_async*
g:likelycomplete#run_async     (default: has('win16') || has('win32') || has('win64') ? (g:likelycomplete#prgname =~ '\c\<gvim\>' ? '!start %s >NUL' : '!start /min cmd /c %s >NUL') : '! ( %s >/dev/null ) &')
    How to run |g:likelycomplete#prgname|.

                                                    *g:likelycomplete#use_vimproc*
g:likelycomplete#use_vimproc   (default: exists('g:loaded_vimproc') && g:loaded_vimproc > 0)
    Use vimproc[1] in some situations (e.g. when updating the word 
    list).

    [1] https://github.com/Shougo/vimproc.vim

                                                    *g:likelycomplete#prg_init_exec*
g:likelycomplete#prg_init_exec (default: 'set lines=10 ch=5 co='. &co)
    An |:exec| command that is run after starting 
    |g:likelycomplete#prgname|.

                                                    *g:likelycomplete#max_wait*
g:likelycomplete#max_wait      (default: 5000)

                                                    *g:likelycomplete#use_syntax*
g:likelycomplete#use_syntax    (default: g:likelycomplete#experimental >= 2 && !empty(g:likelycomplete#run_async) && !empty(g:likelycomplete#prgname))
    If > 0, use information about syntax groups for ranking 
    completions.

    If 1, use |synIDtrans()|. If 2, use |synID()|.

    CAUTION: This doesn't work yet reliably. The quality of results 
    depends on the quality of the vim syntax file for a given 
    filetype.

    NOTE: Since this is time-consuming, it is required to enable async 
    updates via |g:likelycomplete#prgname| and 
    |g:likelycomplete#run_async|.

                                                    *g:likelycomplete#ignore_syntax_rx*
g:likelycomplete#ignore_syntax_rx (default: '\%(Comment\|NonText\|String\)')

                                                    *g:likelycomplete#debug*
g:likelycomplete#debug         (default: 0)

                                                    *likelycomplete#LoadData()*
likelycomplete#LoadData()

                                                    *likelycomplete#GetOption()*
likelycomplete#GetOption(name, ...)

                                                    *likelycomplete#String2Args()*
likelycomplete#String2Args(string)

                                                    *likelycomplete#SetupFiletype()*
likelycomplete#SetupFiletype(filetype, options)

                                                    *likelycomplete#SetupBuffer()*
likelycomplete#SetupBuffer(filetype, bufnr)

                                                    *likelycomplete#RemoveFiletype()*
likelycomplete#RemoveFiletype(filetype)

                                                    *i_<c-g><c-u>*
i_<c-g><c-u> ... <c-\><c-o>:call likelycomplete#EscapeAutoComplete('')<cr>

                                                    *likelycomplete#Tokenize()*
likelycomplete#Tokenize(text, ...)

                                                    *likelycomplete#AsyncUpdateWordList()*
likelycomplete#AsyncUpdateWordList(servername, filetype, filename)

                                                    *likelycomplete#EnsureServer()*
likelycomplete#EnsureServer(allow_start_server)

                                                    *likelycomplete#Handshake()*
likelycomplete#Handshake(servername)

                                                    *likelycomplete#InitServer()*
likelycomplete#InitServer(servername)

                                                    *likelycomplete#RegisterClient()*
likelycomplete#RegisterClient(clientname)

                                                    *likelycomplete#ExitServer()*
likelycomplete#ExitServer(clientname)

                                                    *likelycomplete#ListPicker_tlib()*
likelycomplete#ListPicker_tlib(type, prompt, list, base)

                                                    *likelycomplete#RemoveWords()*
likelycomplete#RemoveWords(...)

                                                    *likelycomplete#MapSelectWord()*
likelycomplete#MapSelectWord(imap)

                                                    *likelycomplete#SelectWord()*
likelycomplete#SelectWord(base)

                                                    *likelycomplete#SetComleteFunc()*
likelycomplete#SetComleteFunc()

                                                    *likelycomplete#EscapeAutoComplete()*
likelycomplete#EscapeAutoComplete(map)

                                                    *likelycomplete#Complete()*
likelycomplete#Complete(findstart, base)



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
