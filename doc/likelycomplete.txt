*likelycomplete.txt*  Collect words for completion
                      Author: Tom Link, micathom at gmail com

Once enabled for a filetype (see |g:likelycomplete_filetypes|), this 
plugin observes any buffer of that filetype. It collects the words, 
ranks them based on the probability of their occurrences (sort of) and 
compiles a dictionary file that is fed to 'complete'. This way any words 
that are frequently used in files of an enabled filetype, should be 
offered in the completion list (see |i_CTRL-P|).


-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

This script requires tlib (vimscript #1863) to be installed.

Also available via git: http://github.com/tomtom/likelycomplete_vim/


Post-Install~

See |g:likelycomplete_filetypes| for how to enable LikelyComplete for a 
certain filetype.


========================================================================
Contents~

        g:likelycomplete_filetypes ........... |g:likelycomplete_filetypes|
        LikelycompleteSetupFiletype .......... |LikelycompleteSetupFiletype()|
        :Likelycomplete ...................... |:Likelycomplete|
        :Likelycompleteremovewords ........... |:Likelycompleteremovewords|
        :Likelycompletemapcompletefunc ....... |:Likelycompletemapcompletefunc|
        :Likelycompletemapselect ............. |:Likelycompletemapselect|
        g:likelycomplete#list_set_filter ..... |g:likelycomplete#list_set_filter|
        g:likelycomplete#select_imap ......... |g:likelycomplete#select_imap|
        g:likelycomplete#set_completefunc .... |g:likelycomplete#set_completefunc|
        g:likelycomplete#use_omnifunc ........ |g:likelycomplete#use_omnifunc|
        g:likelycomplete#use_fuzzy_matches ... |g:likelycomplete#use_fuzzy_matches|
        g:likelycomplete#list_picker ......... |g:likelycomplete#list_picker|
        g:likelycomplete#other_sources ....... |g:likelycomplete#other_sources|
        g:likelycomplete#data_cfile .......... |g:likelycomplete#data_cfile|
        g:likelycomplete#data ................ |g:likelycomplete#data|
        g:likelycomplete#options_vim ......... |g:likelycomplete#options_vim|
        g:likelycomplete#maxsize ............. |g:likelycomplete#maxsize|
        g:likelycomplete#word_minlength ...... |g:likelycomplete#word_minlength|
        g:likelycomplete#once_per_file ....... |g:likelycomplete#once_per_file|
        g:likelycomplete#base ................ |g:likelycomplete#base|
        g:likelycomplete#max ................. |g:likelycomplete#max|
        likelycomplete#SetupFiletype ......... |likelycomplete#SetupFiletype()|
        likelycomplete#String2Args ........... |likelycomplete#String2Args()|
        likelycomplete#SetupBuffer ........... |likelycomplete#SetupBuffer()|
        likelycomplete#Config ................ |likelycomplete#Config()|
        likelycomplete#EnsureFiletype ........ |likelycomplete#EnsureFiletype()|
        likelycomplete#RemoveFiletype ........ |likelycomplete#RemoveFiletype()|
        likelycomplete#SaveFiletypes ......... |likelycomplete#SaveFiletypes()|
        likelycomplete#SingleSelect_tlib ..... |likelycomplete#SingleSelect_tlib()|
        likelycomplete#MultiSelect_tlib ...... |likelycomplete#MultiSelect_tlib()|
        likelycomplete#RemoveWords ........... |likelycomplete#RemoveWords()|
        likelycomplete#MapSelectWord ......... |likelycomplete#MapSelectWord()|
        likelycomplete#SelectWord ............ |likelycomplete#SelectWord()|
        likelycomplete#SetComleteFunc ........ |likelycomplete#SetComleteFunc()|
        likelycomplete#Complete .............. |likelycomplete#Complete()|
        likelycomplete#GetCompletions ........ |likelycomplete#GetCompletions()|


========================================================================
plugin/likelycomplete.vim~

                                                    *g:likelycomplete_filetypes*
g:likelycomplete_filetypes     (default: [])
    A list of filetypes for which LikelyComplete is automatically 
    enabled.

    If you want to permanently disable LikelyComplete for a filetype, 
    it isn't sufficient to remove the filetype name from this 
    variable. You should also call |likelycomplete#RemoveFiletype()| 
    to fully remove any cached information for this filetype.

                                                      *b:likelycomplete_filetype*
    If the variable b:likelycomplete_filetype is defined on FileType 
    events, its value is used instead of 'filetype'. LikelyComplete 
    is automatically enabled for all buffers where the 
    b:likelycomplete_filetype is defined. This variable can be used to 
    generate project-specific word lists.

                                                    *LikelycompleteSetupFiletype()*
LikelycompleteSetupFiletype(filetype)

                                                    *:Likelycomplete*
:Likelycomplete [NAME=VALUE ...]
    Enable LikelyComplete for the current buffer.
    The following arguments are supported:
      maxsize ......... filetype-specific value for 
                        |g:likelycomplete#maxsize|
      keyword_rx ...... Alternative |regexp| for |\k|
      strip_comments .. Remove whole-line comments (not supported for all filetypes)
      strip_strings ... Remove strings
      strip_numbers ... Remove numbers
      strip_rx ........ Remove matching text from lines
      exclude_lines_rx .. Exclude lines matching this |regexp|

                                                    *:Likelycompleteremovewords*
:Likelycompleteremovewords [FILETYPE]
    Remove words from the list for a given filetype (or the filetype of 
    the current buffer).

                                                    *:Likelycompletemapcompletefunc*
:Likelycompletemapcompletefunc
    Map 'completefunc' to a function that returns matches from the 
    original completefunc and from the buffers wordlist.
    See also |g:likelycomplete#use_omnifunc| and 
    |g:likelycomplete#set_completefunc|.

                                                    *:Likelycompletemapselect*
:Likelycompletemapselect IMAP
    Map insert mode IMAP to a function that lets users select a completion 
    from a word list.
    See |tlib#input#List()| for details on how to use the list picker.
    See also |g:likelycomplete#use_omnifunc| and |g:likelycomplete#select_imap|.


========================================================================
autoload/likelycomplete.vim~

                                                    *g:likelycomplete#list_set_filter*
g:likelycomplete#list_set_filter (default: 0)
    If true, the part of the words matching the the base text will be 
    highlighted in |likelycomplete#SelectWord()|.
    If false, the setting of 'smartcase' is ignored.

                                                    *g:likelycomplete#select_imap*
g:likelycomplete#select_imap   (default: '')
    The default map for |:Likelycompletemapselect|.
    If non-empty, enable |:Likelycompletemapselect| for all enabled 
    filetypes.

                                                    *g:likelycomplete#set_completefunc*
g:likelycomplete#set_completefunc (default: 0)
    If true, set 'completefunc' for supported buffers. The results of 
    the old completefunc will be incorporated.

                                                    *g:likelycomplete#use_omnifunc*
g:likelycomplete#use_omnifunc  (default: 0)
    If true, |likelycomplete#GetCompletions()| also offers completions 
    from 'omnifunc'.
    Please be aware that some omnifunc take their time (at least on 
    first invocation).

                                                    *g:likelycomplete#use_fuzzy_matches*
g:likelycomplete#use_fuzzy_matches (default: 0)
    If true, use fuzzy matches for |:Likelycompletemapselect| 
    and |:Likelycompletemapcompletefunc|.
    In order to also use fuzzy search in the list picker, also set 
    |g:tlib#input#filter_mode| to 'fuzzy'.

                                                    *g:likelycomplete#list_picker*
g:likelycomplete#list_picker   (default: 'tlib')
    VIM plugin developers can add support for "list pickers" other 
    than tlib by defining the following functions:

    1. Select a single item from a list:
        likelycomplete#SingleSelect_{TYPE}(prompt, list, ?handlers=[])

    2. Select multiple item from a list:
        likelycomplete#MultiSelect_{TYPE}(prompt, list)

                                                    *g:likelycomplete#other_sources*
g:likelycomplete#other_sources (default: [])
    A list of variable names, whose values will be added to the word 
    list.
    This is only used in conjunction with |:Likelycompletemapselect| 
    and |:Likelycompletemapcompletefunc|.

                                                    *g:likelycomplete#data_cfile*
g:likelycomplete#data_cfile    (default: tlib#persistent#Filename('likelycomplete', 'data', 1))

                                                    *g:likelycomplete#data*
g:likelycomplete#data          (default: tlib#persistent#Get(g:likelycomplete#data_cfile, {'version': 1, 'ft': {}, 'ft_options': {}}))

                                                    *g:likelycomplete#options_vim*
g:likelycomplete#options_vim   (default: {...})
    Some custom options for the vim filetype.
    Anything following a single or double quote is removed. This will 
    make sure that all strings an comments are removed -- at the cost 
    of also removing eligible identifiers following a string.

                                                    *g:likelycomplete#maxsize*
g:likelycomplete#maxsize       (default: 5000)
    The maximum number of words kept per filetype.

                                                    *g:likelycomplete#word_minlength*
g:likelycomplete#word_minlength (default: 3)
    Minimum length of words.

                                                    *g:likelycomplete#once_per_file*
g:likelycomplete#once_per_file (default: 0)
    If true, count a word only once per file. By default, N occurences 
    of word X in a buffer will be counted as N times.

                                                    *g:likelycomplete#base*
g:likelycomplete#base          (default: 50)
    The base number of observations.
    Also the number of files, you can edit without removing a word 
    that was't included in any of these files.
    If this value is too low, new words won't get a chance to be 
    included in the list.

                                                    *g:likelycomplete#max*
g:likelycomplete#max           (default: 10000)
    The maximum number of observations taken into account.

                                                    *likelycomplete#SetupFiletype()*
likelycomplete#SetupFiletype(filetype, options)

                                                    *likelycomplete#String2Args()*
likelycomplete#String2Args(string)

                                                    *likelycomplete#SetupBuffer()*
likelycomplete#SetupBuffer(filetype, bufnr)

                                                    *likelycomplete#Config()*
likelycomplete#Config(filetype, options)

                                                    *likelycomplete#EnsureFiletype()*
likelycomplete#EnsureFiletype(filetype)

                                                    *likelycomplete#RemoveFiletype()*
likelycomplete#RemoveFiletype(filetype)

                                                    *likelycomplete#SaveFiletypes()*
likelycomplete#SaveFiletypes()

                                                    *likelycomplete#SingleSelect_tlib()*
likelycomplete#SingleSelect_tlib(prompt, list, ...)

                                                    *likelycomplete#MultiSelect_tlib()*
likelycomplete#MultiSelect_tlib(prompt, list)

                                                    *likelycomplete#RemoveWords()*
likelycomplete#RemoveWords(...)

                                                    *likelycomplete#MapSelectWord()*
likelycomplete#MapSelectWord(imap)

                                                    *likelycomplete#SelectWord()*
likelycomplete#SelectWord(base)

                                                    *likelycomplete#SetComleteFunc()*
likelycomplete#SetComleteFunc()

                                                    *likelycomplete#Complete()*
likelycomplete#Complete(findstart, base)

                                                    *likelycomplete#GetCompletions()*
likelycomplete#GetCompletions(filetype, base)



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
